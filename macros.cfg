[gcode_macro PID_EXTRUDER]
description: Calibrate the extruder temperature.
gcode:
  {% set T = params.T|default(245)|int %}
  PID_CALIBRATE HEATER=extruder TARGET={T}
  SAVE_CONFIG

[gcode_macro PID_BED]
description: Calibration the temperature of the bed.
gcode:
  {% set T = params.T|default(80)|int %}
  PID_CALIBRATE HEATER=heater_bed TARGET={T}
  SAVE_CONFIG

[gcode_macro PID_ALL]
description: Calibrate the temperature of the extruder and the bed..
gcode:
  # {% set TE = params.TE|default(195)|int %}
  # {% set TB = params.TB|default(45)|int %}
  {% set TE = params.TE|default(245)|int %}
  {% set TB = params.TB|default(80)|int %}
  PID_CALIBRATE HEATER=extruder TARGET={TE}
  PID_CALIBRATE HEATER=heater_bed TARGET={TB}
  SAVE_CONFIG

[gcode_macro ATTACH_PROBE]
description: Attach probe.
gcode:
  {% set F = 4000 %}   
  SAVE_GCODE_STATE NAME=attach_probe_state
  # T1
  G90
  # G0 Z24
  G0 Y60 F{F}
  G0 X20 Y60 F{F}
  G0 X1 Y60 F{F}
  G0 X1 Y120 F{F}
  G0 X20 Y120 F{F}
  G0 X20 Y60 F{F}
  RESTORE_GCODE_STATE NAME=attach_probe_state

[gcode_macro DETACH_PROBE]
description: Detach probe.
gcode:
  {% set F = 4000 %}
  SAVE_GCODE_STATE NAME=detach_probe_state
  # T1
  G90
  # G0 Z14
  G0 Y60 F{F}
  G0 X20 Y60 F{F}
  G0 X20 Y120 F{F}
  G0 X1 Y120 F{F}
  G0 X1 Y60 F{F}
  G0 X20 Y60 F{F}
  RESTORE_GCODE_STATE NAME=detach_probe_state


[gcode_macro CALIBRATION_BED]
description: Calibration bed screws adjust.
gcode:
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  G28
  BED_SCREWS_ADJUST
  G28
  G1 Z1 F{speed}
  Z_ENDSTOP_CALIBRATE
  G1 Z15 F1500
  SAVE_CONFIG

[gcode_macro CALIBRATION_BED_MESH]
description: Manual bed mesh calibration.
gcode:
  G28
  BED_MESH_CLEAR
  BED_MESH_CALIBRATE
  G28
  SAVE_CONFIG

# [gcode_macro CALIBRATION_SKEW]
# description: Calibration skew.
#   SET_SKEW CLEAR=1
#   SET_SKEW XY=100.33,100.146666666667,70.6266666666667
#   SKEW_PROFILE SAVE=my_skew_profile
  
#   SET_SKEW CLEAR=1
#   SKEW_PROFILE LOAD=my_skew_profile

[gcode_macro CALIBRATION_INPUT_SHAPER]
description: Calibration input shaper.
gcode:
  G28
  ACCELEROMETER_QUERY
  MEASURE_AXES_NOISE
  SET_INPUT_SHAPER SHAPER_FREQ_X=0.0 SHAPER_FREQ_Y=0.0
  SHAPER_CALIBRATE
  SAVE_CONFIG

[gcode_macro CALIBRATION_SENSORLESS_X]
description: Calibration sensorless homing X.
gcode:
 {% set T = params.T|default(80)|int %} 
  M117 Calibration sensorless homing X..
	RESPOND MSG="Calibration sensorless homing X.."
  SET_TMC_FIELD FIELD=SGTHRS STEPPER=stepper_x VALUE={T}
  G28 X0
  #G91
  #G1 Z-10

[gcode_macro CALIBRATION_SENSORLESS_Y]
description: Calibration sensorless homing Y.
gcode:
 {% set T = params.T|default(80)|int %} 
  M117 Calibration sensorless homing Y..
	RESPOND MSG="Calibration sensorless homing Y.."
  SET_TMC_FIELD FIELD=SGTHRS STEPPER=stepper_y VALUE={T}
  G28 Y0
  #G91
  #G1 Z-10

[gcode_macro TEST_STEPPERS]
description: Test Steppers.
gcode:
  M117 Test Stepper X..
	RESPOND MSG="Test Stepper X.."
  STEPPER_BUZZ STEPPER=stepper_x

  M117 Test Stepper Y..
	RESPOND MSG="Test Stepper Y.."
  STEPPER_BUZZ STEPPER=stepper_y

  M117 Test Stepper Z..
	RESPOND MSG="Test Stepper Z.."
  STEPPER_BUZZ STEPPER=stepper_z

  M117 Test Extruder stepper..
	RESPOND MSG="Test Extruder stepper.."
  STEPPER_BUZZ STEPPER=extruder

# https://ellis3dp.com/Print-Tuning-Guide/articles/determining_max_speeds_accels.html#usage-of-the-test_speed-macro
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
  # Speed
  {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
  # Iterations
  {% set iterations = params.ITERATIONS|default(5)|int %}
  # Acceleration
  {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
  # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
  {% set bound = params.BOUND|default(20)|int %}
  # Size for small pattern box
  {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
  # Large pattern
    # Max positions, inset by BOUND
    {% set x_min = printer.toolhead.axis_minimum.x + bound %}
    {% set x_max = printer.toolhead.axis_maximum.x - bound %}
    {% set y_min = printer.toolhead.axis_minimum.y + bound %}
    {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
  # Small pattern at center
    # Find X/Y center point
    {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
    {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
    # Set small pattern box around center point
    {% set x_center_min = x_center - (smallpatternsize/2) %}
    {% set x_center_max = x_center + (smallpatternsize/2) %}
    {% set y_center_min = y_center - (smallpatternsize/2) %}
    {% set y_center_max = y_center + (smallpatternsize/2) %}

  # Save current gcode state (absolute/relative, etc)
  SAVE_GCODE_STATE NAME=TEST_SPEED
    
  # Output parameters to g-code terminal
  { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
  # Home and get position for comparison later:
  G28
  # QGL if not already QGLd (only if QGL section exists in config)
  {% if printer.configfile.settings.quad_gantry_level %}
    {% if printer.quad_gantry_level.applied == False %}
      QUAD_GANTRY_LEVEL
      G28 Z
    {% endif %}
  {% endif %} 
  # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
  G90
  G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
  G28 X Y
  G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
  G4 P1000 
  GET_POSITION

  # Go to starting position
  G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

  # Set new limits
  SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

  {% for i in range(iterations) %}
    # Large pattern
      # Diagonals
      G0 X{x_min} Y{y_min} F{speed*60}
      G0 X{x_max} Y{y_max} F{speed*60}
      G0 X{x_min} Y{y_min} F{speed*60}
      G0 X{x_max} Y{y_min} F{speed*60}
      G0 X{x_min} Y{y_max} F{speed*60}
      G0 X{x_max} Y{y_min} F{speed*60}
            
      # Box
      G0 X{x_min} Y{y_min} F{speed*60}
      G0 X{x_min} Y{y_max} F{speed*60}
      G0 X{x_max} Y{y_max} F{speed*60}
      G0 X{x_max} Y{y_min} F{speed*60}
        
    # Small pattern
      # Small diagonals 
      G0 X{x_center_min} Y{y_center_min} F{speed*60}
      G0 X{x_center_max} Y{y_center_max} F{speed*60}
      G0 X{x_center_min} Y{y_center_min} F{speed*60}
      G0 X{x_center_max} Y{y_center_min} F{speed*60}
      G0 X{x_center_min} Y{y_center_max} F{speed*60}
      G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
      # Small box
      G0 X{x_center_min} Y{y_center_min} F{speed*60}
      G0 X{x_center_min} Y{y_center_max} F{speed*60}
      G0 X{x_center_max} Y{y_center_max} F{speed*60}
      G0 X{x_center_max} Y{y_center_min} F{speed*60}
  {% endfor %}

  # Restore max speed/accel/accel_to_decel to their configured values
  SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

  # Re-home and get position again for comparison:
  G28
  # Go to XY home positions (in case your homing override leaves it elsewhere)
  G90
  G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
  G4 P1000 
  GET_POSITION

  # Restore previous gcode state (absolute/relative, etc)
  RESTORE_GCODE_STATE NAME=TEST_SPEED

# https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/dump_variables.html
# Examples
# DUMP_VARIABLES: Returns all variables (excluding printer['configfile'].config and printer['configfile'].settings as they contain the entire config).
# DUMP_VARIABLES NAME=stepper: Returns all variables which have the string stepper in their name.
# DUMP_VARIABLES VALUE=extruder : Returns all variables which have the string extruder in their value.
# DUMP_VARIABLES NAME=stepper VALUE=extruder : Returns all variables which have the string stepper in their name and the string extruder in their value.
# DUMP_VARIABLES SHOW_CFG=1 : Returns all variables, including the config.
[gcode_macro DUMP_VARIABLES]
gcode:
  {% set filter_name = params.NAME|default('')|string|lower %}
  {% set filter_value = params.VALUE|default('')|string|lower %}
  {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
  {% set out = [] %}

  {% for key1 in printer %}
    {% for key2 in printer[key1] %}
      {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
        {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
      {% endif %}
    {% else %}
      {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
        {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
      {% endif %}
    {% endfor %}
  {% endfor %}
    
  {action_respond_info(out|join("\n"))}

# https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/get_variable.html
# Examples
# GET_VARIABLE NAME=toolhead: Returns value and type of variable printer.toolhead.
# GET_VARIABLE NAME=bed_mesh.profiles.default.points.1.0: Returns value and type of variable printer.bed_mesh.profiles.default.points[1][0].
[gcode_macro GET_VARIABLE]
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}


# [homing_override]
# set_position_z: 5
# gcode:
#     M400                  # Wait for moves to finish
#     G90                   # Absolute positioning
#     G0 Z10 F600           # Hop Z-Axis
#     M204 S1000            # Set homing acceleration (important!)

#     {% set x_homed = 'x' in printer.toolhead.homed_axes %}
#     {% set y_homed = 'y' in printer.toolhead.homed_axes %}

#     # Set homeing current
#     SET_TMC_CURRENT STEPPER=stepper_x CURRENT=0.4
#     SET_TMC_CURRENT STEPPER=stepper_y CURRENT=0.4

#     # Home X
#     {% if params.X is defined or params.Y is not defined and params.Z is not defined %}
#         G28 X
#         G0 X{printer.toolhead.axis_maximum.x / 2} F9000
#         {% set x_homed = True %}
#     {% endif %}

#     # Home Y
#     {% if params.Y is defined or params.X is not defined and params.Z is not defined %}
#         G28 Y
#         G0 Y{printer.toolhead.axis_maximum.y / 2} F9000
#         {% set y_homed = True %}
#     {% endif %}

#     # Restore current
#     SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer.configfile.config["tmc2209 stepper_x"].run_current}
#     SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer.configfile.config["tmc2209 stepper_y"].run_current}

#     # Home Z
#     {% if params.Z is defined or params.Y is not defined and params.X is not defined %}
#         {% if x_homed == False or y_homed == False %}
#             M118 X and Y must be homed before homeing Z
#         {% else %}
#             G0 X{printer.toolhead.axis_maximum.x / 2} Y{printer.toolhead.axis_maximum.y / 2} F9000
#             G28 Z
#         {% endif %}
#     {% endif %}

#     # Safe Z
#     G0 Z10 F600

#     # Restore acceleration
#     M204 S{printer.configfile.config.printer.max_accel} 

# BTT SFS v1.0
# [filament_motion_sensor filament_sensor]
# довжина_виявлення: 10
# екструдер: екструдер
# switch_pin: ^PC5
# pause_on_runout: Правда
# insert_gcode:
#     Виявлено вставку M117
# runout_gcode:
#     M117 Runoout Detected

# [gcode_macro PRINT_START]
# gcode:
#   # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
#   {% set target_bed = params.BED|int %}
#   {% set target_extruder = params.EXTRUDER|int %}
#   {% set target_chamber = params.CHAMBER|default("40")|int %}

# [gcode_macro SHUTDOWN]
# gcode:
#   {action_call_remote_method("shutdown_machine")}

# [gcode_macro REBOOT]
# gcode:
#   {action_call_remote_method("reboot_machine")}

